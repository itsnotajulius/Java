- Extra:

  - Comments: //
  - Multi-Line Comment: \* \*/

- Printing:
  - System.out.println(""/#/Boolean)

  Datatypes:
    Char:                     char var = 'Letter';
    String:                   String var = "Text";
    Byte:                     byte var = #;           (Between -128 and 127)
    Short                     short var = #
    Integer:                  int var = #;
    Long:                     long var =#;
    Float:                    float var = decimal.7;
    Double:                   double var = decimal.15
    Boolean:                  boolean var = true/false;
    
    Final:                    final varType = X; (Sets the output as constant)
    Converting:               dataType var = dataType.parseType(text)
    Type Casting:
      Widening Casting:       double var = varByte;
      Narrow Casting:         byte var = (byte) varDouble;  

  Arrays:
    Single Array:             dataType[] varArray;
                              dataType[] varArray = {element,element,..};
    TwoD Array                dataType[][] varArray = {{},{}};
    Assign Array:             varArray = new dataType[] {element,..,}
    Length:                   varArray.length
                              varArray[i].length


Operators:
  Arithmetic Operators:
    Addition:                 +
    Sub:                      -
    Multi                     *
    Division                  /
    Mod/Remainder             %
    Power:                    ^
    Increment:                ++
    Decrement:                --

  Comparison Operators:
    Equal:                    =
    Not Equal:                !=
    Greater:                  >
                              >=
    Less Than:                <
                              <=

  Logical Operators:
    AND:                        &&
    OR:                         ||
    Not:                        !

  
  Conditions:
    If:                         if(condition){}
    If Else:                    if(condition){}else{}
    Ternary Operator:           dataType var = (condition) ? conditionMet : else
    Else if:                    if(condition){}else if(condition){}else{}


    Switch Case:                switch (expression){
                                  case checkValue:
                                    executeBox....
                                    break;
                                  default:
                                    executeBox....
                                }

    For Loop:                   for(var;condition;increment)
    For:Each                    for(var :array){}

    While:                      while(condition){}
    Do While:                   do{}while(condition)

    Break:                      break;                    (stops)
    Continue:                   continue;                 (Next)
 

KEYWORDS:
  Modifiers:
    Access Modifers:            public                    (accessible by other classes)
                                private                   (accessible only in declared class)
                                protected                 (only same packahe and subclasses)
                                default                   (accessed by classes in same package, when no modifiers set)
    Non-Access Modifers:        final                     (cant be inherited by other classes and attri cant be moded)
                                static                    (attr and methods belong to class)
                                abstract                  (the class cant make objects)
                                abstract                  (methods can only be used in abstract class)
                                transient                 (attri and methods are skipped when serializing)
                                synchronized              (methods can only be access one thread @ time)
                                volatile                  (attri is not cached)





  FUNCTIONS:

  String Functions:
    Concatenation:              Text+""+Text
    Cancate:                    text1.concat("text2")
    Length:                     text.length()
    Upper Case:                 text.toUpperCase()
    Lower Case:                 text.toLowerCase()
    IndexOf:                    text.indexOf("searchText")
    Check in Digit:             text.matchs("[0-9]+.")            (+ means one or more times)

    Special Charaters:
      Single Quote:             \'text\'
      Double Quote:             \"text\"
      Backslash:                 \\
      New Line:                   \n
      Carriage Return:            \r
      Tab:                        \t
      Backspace:                  \b      (Del)
      Form Feed:                  \f
    


  Math Functions:
    Max:                        Math.max(x,y)
    Min:                        Math.min(x,y)
    Square Root:                Math.sqrt(x)
    Absolute(Positive):         Math.abs(x)
    Random:                     Math.random()


  

  METHODS:
    Void Method:                static void myMethod(?dataType? ?var?,...){}
    Not Void Method:            static dataType myMethod(?dataType? ?var?,...){return dataTypeVar;}
    Method Overloading:         dataType1 myMethod(dataType1 var){return;}  dataType2 myMethod(dataType2 var){return;}          (use the same name)
    Recursion Method:           static dataType myMethod(?dataType? ?var?,...){return myMethod(?var?);}
    abstract Method:            abstract void myMethod();
    Call Method:                myMethod(?var?,...);

    
OOP:
  Object Oriented Programming:
    Definition:                 OOP is about creating objects that contain both data and methods. It is reuseable and less code and shorted dev time
                                Classes:  Is the template for objects
                                Objects:  Is an instance of classes, they inherit all variables and methods of class

    Class:                      public class myClass{dataType arriType = data;....}
    Class Constructor:          public myClass(?dataType? ?var?,...){set stuff}                               (must be public)
    Object:                     myClass myObj = new myClass();                            (Can be in different java files but same dir)
    Object variable:            myObj.x
    Modi Variable:              myObj.x = stuff
    Current object:             this.x
    Static and Public:          static can be accesed without object, public need object to be accessed 


    Encapsulation:
    Definition:                 Is used to make sure sensitive data is hidden from user with private variables and public get and set                              
    

    Packages:
      Package:                  Used to group related classes
                                Java API has built-In Packages 
      Built-In Pack:            import package.name.*/Class
      User-defined:             package mypack;

  


